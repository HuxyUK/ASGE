namespace ASGE {

/** @page changelog Changelog

@tableofcontents

@section changelog-320 v3.2.0
Released 23/02/2022

@subsection changelog-320-changes Enhancements

### Minor
- Add function to retrieve all connected gamepads
  [[4877b2f]](https://github.com/HuxyUK/ASGE/commit/4877b2f10eaa81aa59757913ee44b7ae8e5584b6)
- Clamp support for ASGE::Camera
  [[1f3b380]](https://github.com/HuxyUK/ASGE/commit/1f3b380aa2a39942686fd19f408504c17c09ca04)
- Flip flag added for flipping sprites on both X and Y
  [[e51da28]](https://github.com/HuxyUK/ASGE/commit/e51da280e20ece965ba0e9497483eef930c012e4)
- Midpoint calculation added for ASGE::Sprite
  [[b1e6e0b]](https://github.com/HuxyUK/ASGE/commit/b1e6e0b90e071a783ad4be0bf575857a32221aec)
- Support for Point2D == and not != operators
  [[0490adc]](https://github.com/HuxyUK/ASGE/commit/0490adc35ff9aa0a1c92243a4a4966d87184073e)
- Support for rendering non-attached textures
  [[ca5b603]](https://github.com/HuxyUK/ASGE/commit/ca5b603f3e54530d2cdb701607e230341e4ce47c),
  [[20259c3]](https://github.com/HuxyUK/ASGE/commit/20259c3e59861407b4b7999f44ecefe374f96c16)

### Major
- Add debug texture support
  [[8fdd8c2]](https://github.com/HuxyUK/ASGE/commit/8fdd8c220642ee6a16bf28db5687af9153bb6f35)

  To help with debugging of sprites without an attached texture, this
  change automatically allocates a transparent debug texture to all newly
  constructed sprites. This prevents the renderer from crashing
  when a texture has not been attached to a sprite. It can also be
  used for rendering simple blocks of colours i.e. backdrops.

  The texture is transparent and pink by default and scaled with the
  currently attached viewport.

- Better GamePad support
  [[6198eb6]](https://github.com/HuxyUK/ASGE/commit/6198eb60d16f7fe369dc6d8fef57b9e1e73743e1)

  Updated the GamePad retrieval function to use GLFW's specific
  functions that allow buttons to be mapped correctly. As part of
  these changes the user is now able to load updated bindings using
  the input system and as a quality of life addition, a new version
  of getGamePad has been added that will return the first attached
  controller on the system.

- MSDF Rendering
  [[041436d]](https://github.com/HuxyUK/ASGE/commit/041436dd5e73ebe299cb539e521940f13833e3b9),
  [[45c952a]](https://github.com/HuxyUK/ASGE/commit/45c952a890056f207344238f5ff57f4f00118e3a),
  [[e5076bd]](https://github.com/HuxyUK/ASGE/commit/e5076bdebee7f4d8ecce6c729895430f4becd28f),
  [[853ceed]](https://github.com/HuxyUK/ASGE/commit/853ceed943f48aa0b828ccd78c7a2518ec601914),
  [[9c8259c]](https://github.com/HuxyUK/ASGE/commit/9c8259c877585809c12cbe5a8991975c785d60c5)

  Experimental support for SDF rendering based on the msdfgen library.
  Currently, when fonts are loaded an atlas texture is still generated,
  but instead of using the freetype library msdfgen is used to load the
  glyphs and generate MSDF's for them. At the moment the textures are
  able to load and are working, but there are still a number of areas for
  improvement. These include:

  1. Establishing a good distance factor
  2. Optimising the painfully slow generation
  3. Support for different char sets

  \n Upcoming versions of ASGE will aim to include caching and improved
  multi-threaded support for generating them. This will help remove
  the dependency on OpenMP.

- Remove static GameSettings
  [[9fd9b2b]](https://github.com/HuxyUK/ASGE/commit/9fd9b2b1e059059f964ebfbdbb168ac06e80fd3b),
  [[a85ff8f]](https://github.com/HuxyUK/ASGE/commit/a85ff8ff92b09af4e02a7f48ca50ba5f60ba035b)

  This is a fairly big change to the code-base due to the way game
  settings were being accessed throughout the engine. Instead, the
  data will be stored within objects where they are most relevant.
  This has led to most of them to be moved in to the Renderer,
  however, some have been placed in to the Game itself.

  GameSettings were never really intended to be used like they were.
  Instead they're were designed to be a simple struct that a
  launcher could generate via a UI and then pass on to the constructor
  of the game. This brings it more in line with this original idea.

- Render States
  [[2651804]](https://github.com/HuxyUK/ASGE/commit/26518044bc8f08055642c16706013d2030472408)

  These new render states keep track of changes to the viewport or the
  camera view. Now instead of flushing every time one of these changes
  a snapshot is taken. This snapshot is then associated with each quad
  that needs to be drawn via its batch number. Then when rendering the
  quad batch, the correct snapshot can be used or applied as needed.

  This allows for users to change these settings when rendering and
  know that the state the renderer was in when the render request was
  made will still be correct when the batches are rendered.

  More work needs to be done to better optimise these changes,
  especially in the sort method for the batch renderer as the aim
  would be to reduce the number of switches and batches required to
  draw the user requested scenes.

- Rewrite of viewport and resolution scaling
  [[963cfd3]](https://github.com/HuxyUK/ASGE/commit/963cfd3b8079d386a9fab5140f9ec7b35454db16)

  A particularly large re-write of the scaling and viewport code has
  taken place. A new Resolution data structure has been added. Its
  job is to store all the relevant resolution data such as window,
  desktop and game dimensions.

  As part of this refactor/re-write and to help support correct
  window scaling the idea or concept of a design resolution has been
  included. This design resolution is known as the base resolution and
  can be thought of as the size of the game world. It is independent from
  pixel space.

  Now when running the game in different resolutions the base resolution
  can be used to ensure scaling maintains the correct ratios, leaving
  objects to remain in their correct proportions and to be aligned correctly
  on this screen. Well, technically this depends on the new resolution
  policy that's also been added. If you prefer it is possible to "fit"
  the viewports to the window, but this will lead to scaling issues.

  It's recommended to review the new Resolution class for more info
  and guidance on the available policies.The hope is that these changes
  now allow for flexible resizing of the game window, without the developer
  having to invest too much time and thought in to. Want it to scale and
  maintain its aspect ratio? Just set the policy to "maintain" and be done
  with it.

- Texture attachment flags
  [[59293f1]](https://github.com/HuxyUK/ASGE/commit/59293f14014e27c3b213f455b3a5d21909d203f0)

  These new flags are designed to control how a texture is attached
  to a sprite. Currently, when attaching a new texture to a sprite, it
  will automatically reset the width/height and UV coordinates set on
  the existing sprite. However, it may be desirable to have more granular
  control over this process. These new attach flags are an attempt to
  allow this to happen. They can be set to retain the sprites properties
  or to allow them to be reset depending on the developers preferences.

- Tile support
  [[5996de3]](https://github.com/HuxyUK/ASGE/commit/5996de35870d510eab21322249a28238baa74b20)

  Add support for Tiles to the engine. Tiles are semantically
  different to sprites and thus are easier to convey using their own
  data structure. Unlike a sprite, they do not store any information
  regarding their positioning. When rendering tiles, the {X,Y} coordinates
  will need to be provided as tiles can be "rendered" within a larger
  context such as a map. The map will known each tile's {X,Y} and
  render them accordingly.

@subsection changelog-320-bugs Bug Fixes
- Fix memory leak in PixelBuffer
  [[6bdc408]](https://github.com/HuxyUK/ASGE/commit/6bdc4081b89f6bc1263bee27a11072335ca2bd77)

- Higher zoom values for camera should zoom in and not out
  [[1d3046d]](https://github.com/HuxyUK/ASGE/commit/1d3046d958cacad0373a373fdd9be92fac51deca)

- Fix issue when copying gamepad data
  [[25043a4]](https://github.com/HuxyUK/ASGE/commit/25043a4c0ae311bde4b679ac507b337e3c002856)

@subsection changelog-320-changes-misc Misc
- Remove deprecated render functions [[1c17247]](https://github.com/HuxyUK/ASGE/commit/1c1724747b666e3ff0e8f5b9049fa44af05e4cac)
- Fix issue with CMake include directives [[f065a39]](https://github.com/HuxyUK/ASGE/commit/f065a39d9cb24eec45ee861947c1f81de293ef69)
- Freetype2 VER-2-11-1
- GLAD v0.1.36
- STB to latest

<br>

@section changelog-311 v3.1.1
Released 18/11/2021

@subsection changelog-311-changes Enhancements
- Monolithic builds now disable shared by default [[81a7ce9]](https://github.com/HuxyUK/ASGE/commit/27d30f32eecf5b5fcb355bdfdd24f305c6ac0790)
- Enable C++20 support for Engine builds [[6177e74]](https://github.com/HuxyUK/ASGE/commit/6177e74989963bfe3da554f94d8b76c79cd1d331)
- Remove dependency that was added in error [[fed6275]](https://github.com/HuxyUK/ASGE/commit/fed6275eb8a4a0d561d0a00df9c58f7f03cae272)

<br>

@section changelog-310 v3.1.0
Released 17/11/2021

@subsection changelog-310-changes Enhancements
- 2nd fix for bounds calculation on fonts [[81a7ce9]](https://github.com/HuxyUK/ASGE/commit/18f744f2cf2d6888de041e38723194a2587cdccd)
- Enable mipmaps for font atlases [[5d5adb]](https://github.com/HuxyUK/ASGE/commit/5d5adbe2ae253ecac83b26432d750e47297f547c)
- Add new function for calculation max deviation in the Y axis for font rendering `boundsY`

<br>

@section changelog-300 v3.0.0
Released 16/11/2021

@subsection changelog-300-changes Enhancements
- Fix for long-standing input bug [[053d425]](https://github.com/HuxyUK/ASGE/commit/053d425cfe2998483264bb5a0bc2565b5c32664e)
- Fix issue with bounds calculation for fonts [[ab418f7]](https://github.com/HuxyUK/ASGE/commit/ab418f7cfe394c3ae49b03394818be399a841107)

@subsection changelog-300-changes-misc Misc
- Added stduuid library [[06c4b93]](https://github.com/HuxyUK/ASGE/commit/06c4b93bdc894e8e9dec4a51388461d8b9b2319d)

<br>

@section changelog-220 v2.2.0
Released 15/11/2021

@subsection changelog-220-changes Enhancements
- Support for MSAA rendering [[1a67df7]](https://github.com/HuxyUK/ASGE/commit/1a67df7b393fc27bc465fd60a4fa5573ec18c01a)
- Support for MSAA frame buffers [[211783c]](https://github.com/HuxyUK/ASGE/commit/211783c6d54252ea3507852c520f77f9156ec724)

@subsection changelog-220-bugs Bug Fixes
- Swap correct UV coordinates when x-axis flipped [[9f92a9c]](https://github.com/HuxyUK/ASGE/commit/9f92a9ca8e85abeaeaa152cae416683930027a93)

@subsection changelog-220-changes-misc Misc
- Don't clamp sub-pixel positions [[e6621d6]](https://github.com/HuxyUK/ASGE/commit/e6621d6e32f80e052b091dba54a667b93b299fb4)

<br>

@section changelog-210 v2.1.0
Released 07/11/2021

@subsection changelog-210-changes Enhancements
- Introduction of Unity style time steps [[3aa4fd4]](https://github.com/HuxyUK/ASGE/commit/3aa4fd479558795ca11ab81898ceb6e0d2b964eb)

@subsection changelog-210-bugs Bug Fixes
- Add y spacing in font atlas to prevent sampling issues when scaling

<br>

@section changelog-202 v2.0.2
Released 01/11/2021

@subsection changelog-202-changes Enhancements
- Scale the game resolution on init, instead of assuming framebuffer dimensions

@subsection changelog-202-changes-misc Misc
- Disable altera warnings for clang-tidy

@subsection changelog-202-bugs Bug Fixes
- Using a custom shader no longer causes an issue when reset to nullptr
- Flip flags now apply correctly to sprites when using custom source rectangles

<br>

@section changelog-201 v2.0.1
Released 31/10/2021

@subsection changelog-201-changes Enhancements
- Expose read-only camera positional property
- Disable deprecated OpenGL support, fixes mac-build
- Target 10.15 to allow use of C++17 std::filesystem

@subsection changelog-201-changes-misc Misc
- Minor formatting changes
- Upgrade to a non-broken Freetype2 repository
- Working MacOS build

<br>

@section changelog-200 v2.0.0
Released 18/10/2021

<br>

@section changelog-200a4 v2.0.0.alpha.4
Released 14/05/2021

@subsection changelog-200a4-changes Enhancements
- Allow UV wrapping mode to be changed for individual textures
- Expose read-only camera positional property

@subsection changelog-200a4-changes-misc Misc
- The default UV wrapping mode is now CLAMP instead of REPEAT
- Renamed EXCLUSIVE_FULLSCREEEN typo to EXCLUSIVE_FULLSCREEN

@subsection changelog-200a4-bugs Bug Fixes
- Using a custom shader no longer causes an issue when reset to nullptr
- Flip flags now apply correctly to sprites when using custom source rectangles

<br>

@section changelog-200a3 v2.0.0.alpha.3
Released 10/05/2021

@subsection changelog-200a3-changes Enhancements
- Expose screen resolution info to end user
- Resize and reposition viewports when entering fullscreen modes

@subsection changelog-200a3-bugs Bug Fixes
- Camera zoom now works correctly, thanks @olihewi
- NVIDIA rendering under Linux no longer causes artefacts

<br>

@section changelog-200a2 v2.0.0.alpha.2
Released 23/04/2021

@subsection changelog-200a2-changes Enhancements
- Added CameraView data structure
- Added time-step conversion functions
- Render function now passes GameTime
- Render to texture support implemented
- Support for custom viewports
- Use int16_t consistently for z-ordering

@subsection changelog-200a2-changes-misc Misc
- Bumped supporting libraries
- Fixed MSVC build issues
- Moved to GLAD from GLEW for GL loader
- Renamed headers to .hpp
- Updates are now fixed-steps and renders variable

@subsection changelog-200a2-bugs Bug Fixes
- Alpha channel now works when rendering text
- Fixed camera view issues
- Many small issues resolved due to porting of library to Python
- Sprites will now fallback to the default shader if the text version is currently attached
- Time-steps and frame pacing improvements
- Z-ordering now works correctly

<br>

@section changelog-200a1 v2.0.0.alpha.1
Released 29/02/2020

@subsection changelog-200a1-changes Enhancements
- Text now proxy's the width and height calls to the underlying font
- float ASGE::Text::getWidth()
- float ASGE::Text::getHeight()
- Removed slow ASGE::DebugPrinter{}
- Added a thread-safe generic logging namespace @see Logging
  This new namespace provides a generic logging factory where
  custom loggers can be added. It comes with a std::cout and
  basic file logger. By default it uses std::cout for logging.
- Added pre-processor definitions that allow different logging levels
- Added Gamepad button mappings to make it easier to locate buttons/axis.
- Updated ASGE predefined colours to utilise Colour structs.
- ASGE::Colour can now construct from three floats instead of just arrays.
- String width and height for a given font @see pxWide and pxHeight
- Delta time in seconds can now be retrieved via GameTime
- Added ability to set the mouse cursor's position
- ASGE::Text class now replaces standard text rendering
- Added helper constants for mapping sprite source rectangles
- FPS limits can now be applied to enable finer control of rendering
- Support for basic MSAA and AF options

@subsubsection changelog-200a1-changes-misc Misc
- Remove unused GamePad Event
- Texture2D dimensions are now floats
- Game setup parameters have been moved to a struct called GameSettings
- The current game settings can be accessed via a static data member on ASGE::Game
- GameTime is no longer passed to the render function, simulations should be done using the update function

@subsubsection changelog-200a1-changes-rendering Rendering
- Complete rewrite of rendering system for modern OGL systems
- Shaders now utilise a RenderQuad data structure which is uploaded in batches
- Persistant mapping of SSBO objects enabled, allowing manual DMA transfer signalling
- Support for Triple buffer SSBO
- Pixelbuffer support
- Textures with out of bounds UV coordinates now repeat instead of clamp
- Implemented proper move support for Quads resulting in large speed gains for sorting

@subsection changelog-200a1-bugs Bug Fixes
- ASGE::Text now sets the Y position instead of the z-order when calling setPositionY
- Various Code Analysis fixes
- Moved Point2D to ASGE namespace
- Flip flags now work correctly
- Fixed issue with sprite sheets and deferred rendering

<br>

@section changelog-032 v0.3.2
Released 20/02/2019

@subsection changelog-032-changes Enhancements
- GameTime field names have been simplified to delta and elapsed
- ASGE::Game now stores time related delta in eopch data member
- Support for in-engine splash screens

@subsection changelog-032-bugs Bug Fixes
- Fixed build warning
- Added debug message when performing monolithic builds

<br>

@section changelog-031 v0.3.1
Released 08/01/2019

@subsection changelog-031-changes Enhancements
- Updated PhysFS to latest version 3.01

@subsection changelog-031-bugs Bug Fixes
- Fixes issue with PhysFS and latest version of Crapindows 10 and its API changes

<br>

@section changelog-030 v0.3.0
Released 12/12/2018

@subsection changelog-030-changes Enhancements
- Implemented a custom generic value type based on std::any.
- Added a new shader namespace.
- Added user support for custom pixel shaders.
- Implemented a simple shader cache to store user added shaders.
- Uniforms are accessed through the use of _UniformB.
- Bumped OGL to 4.1.
- See ASGE::Shader and ASGE::SHADER_LIB for more details.

@subsection changelog-030-bugs Bug Fixes
- Fixed some compilation errors in specific configurations.

<br>

@section changelog-024 v0.2.4
Released 12/11/2018

@subsection changelog-024-changes Enhancements
- Added ability to change the directory for writing.
- It is now possible to create subdirectories inside the root of the write dir.
- Basic types now supported by the template append function for IOBuffers.
- String specialisation has been added to support appending when using IOBuffers.
- Added string for game name to ASGE::Game. Used for default file storage and window titles.
- Default write directory in windows is %APPDATA%\\ASGE\\%game_name%
- Support to mount additional user directories.
- Support to enumerate a directory.
- Support to delete a file.
- See ASGE::FILEIO for more details.

@subsection changelog-024-bugs Bug Fixes
- Buffer size was not being increased when data was appended

<br>

@section changelog-023 v0.2.3
Released 12/11/2018

@subsection changelog-023-changes Enhancements
- Added utility struct to represent a point in 2D space: Point2D
- Added utility struct to represent the 4 bounds of a rectangle i.e a sprite: SpriteBounds
- New function to retrieve local bounds of a sprite
- New function to retrieve global bounds of a sprite

<br>

@section changelog-022 v0.2.2
Released 16/10/2018

@subsection changelog-022-hotfix Hotfix
- Reworked FileIO to remove dependency on PhysFS headers

<br>

@section changelog-021 v0.2.1
Released 10/10/2018

@subsection changelog-021-changes Enhancements
- Support monolithic builds that integrate static into single shared library
- Engine now also searches game.dat for resources

@subsection changelog-021-bugs Bug Fixes
- Fixed build issues for Linux 

<br>

@section changelog-020 v0.2.0
Released 14/09/2018

@subsection changelog-020-changes Enhancements
- Added PhysFS and PhysFS++ 
- New File class to allow easy management of data
- New DebugPrinter (a thread safe console output class)
- Moved demo code to use FileIO 
- Dependencies have been reworked for builds
- Added butler
- Added 7zip for windows
- Renamed default resources folder to data

@subsection changelog-020-bugs Bug Fixes
- Fixed #29: Flip flags for sprites were not initialised correctly.
- Some minor code tidy (static analysis)
- Fixed build issue with missing include

<br>

@section changelog-016 v0.1.6
Released 28/06/2018

@subsection changelog-016-changes Enhancements
- Moved build system to CMake
- Build support for Linux/OSX/Windows added
- Removed VS projects and solutions
- Upgraded external libraries 

<br>

@section changelog-015a v0.1.5a
Released 03/04/2018

@subsection changelog-015a-hotfix Hotfix
- Ensure mouse co-ordinates are correctly gathered when sending the click event

<br>

@section changelog-015 v0.1.5
Released 14/03/2018

@subsection changelog-015-changes Enhancements
- Added mouse button constants. See ASGE::MOUSE

@subsection changelog-015-bugs Bug Fixes
- Mouse co-ordinates will now always be unprojected back into orthogonal space
- Fixed issue with subpixel positions causing texel offsets by rounding up vertex positions

<br>

@section changelog-014 v0.1.4
Released 07/03/2018

@subsection changelog-014-bugs Bug Fixes
- Fixed an issue with the wrong UV mapping when using source rectangles for rendering sprites

<br>

@section changelog-013 v0.1.3
Released 15/02/2018

@subsection changelog-013-changes Enhancements
- Added the ability to hide the mouse cursor
- Added the ability to lock the mouse cursor to the window

<br>

@section changelog-012 v0.1.2
Released 18/12/2017

@subsection changelog-012-bugs Bug Fixes
- Resolved issue with string destruction after storing the texture in the cache  

<br>

@section changelog-011 v0.1.1
Released 14/09/2018

@subsection changelog-011-changes Enhancements
@subsubsection changelog-011-changes-sprites Sprites
- Sprites now use appropriate getters and setters
- Sprites can now be flipped in the x or y axis. 
- Sprites can now use a source rectangle to make use of sprite sheets
- Sprites now support for opacity using the alpha channel

@subsubsection changelog-011-changes-render Render modes
- Batching modes for texture, front to back and back to front mode added
- Borderless window support added
- Deferred rendering support added
- Fullscreen support added
- Implemented a new sprite batch class that manages rendering of both text and sprites
- Rendering the FPS also shows some additional debug info
- Replaced dynamic text buffers with a larger static buffer
- Replaced sprite shader with an instancing version

@subsubsection changelog-011-changes-docs Documentation
- Doxygen comments have been added to all public facing API classes and functions.

@subsubsection changelog-011-changes-misc Misc
- Added a new demo browser to the game engine
- Huge performance increases when rendering large numbers of sprites
- Huge performance increases when rendering large amounts of text
- Ordering renders by their texture and colour hugely benefits the sprite batch system

@subsection changelog-011-bugs Bug Fixes
- Fixed issue when applying a scale to rotated sprites
- Fixed issue where it was not possible to obtain the sprite's dimensions
- Fixed issue where the texture cache would not empty when the game exits but the textures would be unloaded from GPU
- Fixed issue where FPS counter could be rendered behind other sprites 

@subsection changelog-011-upgrades Upgrades
- Updated GLEW to 2.1.0

*/

}
